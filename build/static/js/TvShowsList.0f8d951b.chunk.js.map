{"version":3,"file":"static/js/TvShowsList.0f8d951b.chunk.js","mappings":"sNAIA,MACMA,GAA8BC,E,QAAAA,KADhB,QAAC,OAAEC,GAAH,SAAiDA,CAAjD,IAC6CA,GAAWA,EAAOC,QAAU,CAAC,I,cCJ9F,GAAgB,UAAY,8BAA8B,KAAO,yBAAyB,KAAO,yBAAyB,eAAiB,mCAAmC,QAAU,4BAA4B,MAAQ,2B,gECiB5N,MAAMC,GAAeC,EAAAA,EAAAA,KAAS,IAAM,+BAAoF,CACpHC,UAAU,SAAC,KAAD,MAGRC,GAAaF,EAAAA,EAAAA,KAAS,IAAM,+BAAgF,CAC9GC,UAAU,SAAC,KAAD,MAGRE,GAAYH,EAAAA,EAAAA,KAAS,IAAM,uCAA8E,CAC3GC,UAAU,SAAC,KAAD,MA4Ed,MAzEA,WACI,MAAMG,GAAWC,EAAAA,EAAAA,KACXC,GAAoBC,EAAAA,EAAAA,GAAeC,EAAAA,IACnCC,GAAmBF,EAAAA,EAAAA,GAAeG,EAAAA,IAClCC,GAAeJ,EAAAA,EAAAA,GAAeK,EAAAA,IAC9BC,GAAiBN,EAAAA,EAAAA,GAAeO,EAAAA,IAChCC,GAAcR,EAAAA,EAAAA,GAAeS,EAAAA,IAC7BC,GAAcV,EAAAA,EAAAA,GAAeW,EAAAA,KAC7B,OAAEC,IAAWZ,EAAAA,EAAAA,GAAeZ,IAC3ByB,EAAkBC,IAAuBC,EAAAA,EAAAA,WAAS,IAA0B,KAE7EC,GAAiBC,EAAAA,EAAAA,cAAaC,IAChCJ,EAAoBI,EAApB,GACD,IAYH,OAVAC,EAAAA,EAAAA,YAAU,MACFpB,GAAsBK,GAAiBM,GAAgBF,EAAYY,QAAQvB,GAASwB,EAAAA,EAAAA,IAAa,CAAEC,SAAU,CAAC,IAAnC,GAChF,CAACzB,EAAUE,EAAmBW,EAAaN,EAAcI,KAE5DW,EAAAA,EAAAA,YAAU,KACFpB,GAAqBW,GACrBb,GAASwB,EAAAA,EAAAA,IAAa,CAAEC,SAAU,CAAEC,EAAGb,KAC1C,GACF,CAACb,EAAUE,EAAmBW,IAE7BR,EAAyB,MAGzB,iCACI,UAACN,EAAD,WACKU,IACG,oBAASkB,UAAWC,EAAAA,UAApB,UACI,SAAC,KAAD,CAASC,KAAK,gBAAgBC,MAAO,OAG7C,oBAASH,UAAWC,EAAAA,UAApB,UACI,SAACjC,EAAD,CACIoC,QAAQ,QACRC,MAAOzB,EAAe,UAAY,SAClC0B,SAAS,SACTC,UAAMC,EACNC,aAAa,SACbC,iBAAiB,EACjBC,qCAAiCH,EAPrC,SASK5B,GAAgB,QAGzB,oBAASoB,UAAWC,EAAAA,UAAkBG,QAAQ,WAA9C,WACM,OAACf,QAAD,IAACA,IAAAA,EAAkBO,SACjBP,EAAiBuB,KAAKC,IAClB,MAAM,GAAEC,EAAF,MAAMC,EAAN,SAAaC,EAAb,QAAuBC,GAAYJ,EACnCK,EAAQF,GAAYG,EAC1B,OACI,oBAAkBnB,UAAWC,EAAAA,KAA7B,UACI,UAAC,KAAD,CAAgBD,UAAWC,EAAAA,KAAamB,GAAIH,EAASI,KAAG,EAAxD,WACI,mBAAQrB,UAAWC,EAAAA,eAAnB,UACI,gBAAKD,UAAWC,EAAAA,MAAcqB,IAAKJ,EAAOK,IAAKR,EAAOA,MAAOA,OAEjE,eAAIf,UAAWC,EAAAA,MAAf,SAA8Bc,QALxBD,EADlB,UAahB,oBAASd,UAAWC,EAAAA,UAAkBG,QAAQ,aAAaoB,MAAO,CAAEC,OAAQrC,GAA5E,UACI,SAACjB,EAAD,CAAYqB,eAAgBA,EAAgBkC,KAAM1C,EAAa2C,aAAc,EAAGC,uBAAmBpB,QAIlH,C","sources":["features/layout/layoutSelector.ts","webpack://rrkallan-demo/./src/pages/TvShows/TvShowsList/resources/styles/tvShowList.module.scss?6265","pages/TvShows/TvShowsList/index.tsx"],"sourcesContent":["import { createSelector } from \"@reduxjs/toolkit\";\nimport { RootState } from \"Store/types\";\nimport type { InterfaceLayoutState } from \"./types\";\n\nconst layoutState = ({ layout }: RootState): InterfaceLayoutState => layout;\nconst getFooterBoundingClientRect = createSelector(layoutState, (layout) => layout.footer || {});\n\nexport { layoutState, getFooterBoundingClientRect };\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"tvShowList_container__fIyAQ\",\"unit\":\"tvShowList_unit__HDcwn\",\"link\":\"tvShowList_link__OFhKi\",\"imageContainer\":\"tvShowList_imageContainer__JjhVI\",\"caption\":\"tvShowList_caption__eoC-W\",\"title\":\"tvShowList_title__DLS-T\"};","import { useEffect, useState, useCallback } from \"react\";\nimport loadable from \"@loadable/component\";\nimport { useAppDispatch, useAppSelector } from \"Store/hooks\";\nimport {\n    getTvShowsLoading,\n    getLastUpdatedLoaded,\n    getTvShowsList,\n    getTvShowsSearchValue,\n    getTvShowsError,\n    getLastUpdatedError,\n} from \"features/TvShows/tvShowsSelector\";\nimport { fetchTvShows } from \"features/TvShows/tvShowsSlice\";\nimport { getFooterBoundingClientRect } from \"features/layout/layoutSelector\";\nimport { Loading, NavigationLink } from \"@rrkallan/ui-library\";\nimport { TypeEntitiesList } from \"features/TvShows/types\";\nimport styles from \"./resources/styles/tvShowList.module.scss\";\nimport noImage from \"./resources/images/no-image.png\";\n\nconst Notification = loadable(() => import(/* webpackChunkName: \"Notification\" */ \"@rrkallan/ui-library/Notification\"), {\n    fallback: <Loading />,\n});\n\nconst Pagination = loadable(() => import(/* webpackChunkName: \"Pagination\" */ \"@rrkallan/ui-library/Pagination\"), {\n    fallback: <Loading />,\n});\n\nconst Container = loadable(() => import(/* webpackChunkName: \"Container\" */ \"@rrkallan/ui-library/Container\"), {\n    fallback: <Loading />,\n});\n\nfunction TvShowsList(): JSX.Element | null {\n    const dispatch = useAppDispatch();\n    const lastUpdatedLoaded = useAppSelector(getLastUpdatedLoaded);\n    const lastUpdatedError = useAppSelector(getLastUpdatedError);\n    const tvShowsError = useAppSelector(getTvShowsError);\n    const tvShowsLoading = useAppSelector(getTvShowsLoading);\n    const tvShowsList = useAppSelector(getTvShowsList);\n    const searchValue = useAppSelector(getTvShowsSearchValue);\n    const { height } = useAppSelector(getFooterBoundingClientRect);\n    const [tvShowsPageItems, setTvShowsPageItems] = useState((): TypeEntitiesList[] => []);\n\n    const getPageContent = useCallback((currentData: TypeEntitiesList[]) => {\n        setTvShowsPageItems(currentData);\n    }, []);\n\n    useEffect(() => {\n        if (lastUpdatedLoaded && !tvShowsError && !searchValue && !tvShowsList.length) dispatch(fetchTvShows({ urlParam: {} }));\n    }, [dispatch, lastUpdatedLoaded, searchValue, tvShowsError, tvShowsList]);\n\n    useEffect(() => {\n        if (lastUpdatedLoaded && searchValue) {\n            dispatch(fetchTvShows({ urlParam: { q: searchValue } }));\n        }\n    }, [dispatch, lastUpdatedLoaded, searchValue]);\n\n    if (lastUpdatedError) return null;\n\n    return (\n        <>\n            <Container>\n                {tvShowsLoading && (\n                    <section className={styles.container}>\n                        <Loading text=\"Loading shows\" delay={5} />\n                    </section>\n                )}\n                <section className={styles.container}>\n                    <Notification\n                        variant=\"error\"\n                        state={tvShowsError ? \"visible\" : \"hidden\"}\n                        iconSize=\"normal\"\n                        icon={undefined}\n                        iconPosition=\"center\"\n                        showCloseButton={false}\n                        customOnClickHandlerCloseButton={undefined}\n                    >\n                        {tvShowsError || \"\"}\n                    </Notification>\n                </section>\n                <section className={styles.container} variant=\"overview\">\n                    {!!tvShowsPageItems?.length &&\n                        tvShowsPageItems.map((tvShow) => {\n                            const { id, title, imageUrl, showUrl } = tvShow;\n                            const image = imageUrl || noImage;\n                            return (\n                                <article key={id} className={styles.unit}>\n                                    <NavigationLink className={styles.link} to={showUrl} end>\n                                        <figure className={styles.imageContainer}>\n                                            <img className={styles.image} src={image} alt={title} title={title} />\n                                        </figure>\n                                        <h1 className={styles.title}>{title}</h1>\n                                    </NavigationLink>\n                                </article>\n                            );\n                        })}\n                </section>\n            </Container>\n            <section className={styles.container} variant=\"pagination\" style={{ bottom: height }}>\n                <Pagination getPageContent={getPageContent} data={tvShowsList} itemsPerPage={8} prefixSearchParam={undefined} />\n            </section>\n        </>\n    );\n}\n\nexport default TvShowsList;\n"],"names":["getFooterBoundingClientRect","createSelector","layout","footer","Notification","loadable","fallback","Pagination","Container","dispatch","useAppDispatch","lastUpdatedLoaded","useAppSelector","getLastUpdatedLoaded","lastUpdatedError","getLastUpdatedError","tvShowsError","getTvShowsError","tvShowsLoading","getTvShowsLoading","tvShowsList","getTvShowsList","searchValue","getTvShowsSearchValue","height","tvShowsPageItems","setTvShowsPageItems","useState","getPageContent","useCallback","currentData","useEffect","length","fetchTvShows","urlParam","q","className","styles","text","delay","variant","state","iconSize","icon","undefined","iconPosition","showCloseButton","customOnClickHandlerCloseButton","map","tvShow","id","title","imageUrl","showUrl","image","noImage","to","end","src","alt","style","bottom","data","itemsPerPage","prefixSearchParam"],"sourceRoot":""}