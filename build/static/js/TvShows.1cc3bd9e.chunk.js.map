{"version":3,"file":"static/js/TvShows.1cc3bd9e.chunk.js","mappings":"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","sources":["Store/hooks/index.ts","features/TvShows/tvShowsSelector.ts","webpack://rrkallan-demo/./src/pages/TvShows/resources/styles/tvShows.module.scss?aa2c","pages/TvShows/index.tsx","../node_modules/reselect/es/defaultMemoize.js","../node_modules/reselect/es/index.js"],"sourcesContent":["import { TypedUseSelectorHook, useDispatch, useSelector } from \"react-redux\";\nimport { ThunkDispatch, AnyAction } from \"@reduxjs/toolkit\";\nimport { RootState, AppDispatch } from \"Store/types\";\n\nconst useAppDispatch = (): ThunkDispatch<RootState, AppDispatch, AnyAction> => useDispatch();\nconst useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n\nexport { useAppDispatch, useAppSelector };\n","import { createSelector } from \"@reduxjs/toolkit\";\nimport { RootState } from \"Store/types\";\nimport type { InterfaceTvShowsState } from \"./types\";\n\nconst tvShowsState = ({ tvShows }: RootState): InterfaceTvShowsState => tvShows;\nconst getTvShowsList = createSelector(tvShowsState, (tvShows) => {\n    const getSearchResult = !!tvShows.search.value;\n    const stateShowKey = getSearchResult ? \"search\" : \"overview\";\n\n    return tvShows[stateShowKey].entities || [];\n});\n\nconst getTvShowsLoading = createSelector(tvShowsState, (tvShows) => {\n    const isLoadingSearchResult = !!tvShows.search.value;\n    const stateShowKey = isLoadingSearchResult ? \"search\" : \"overview\";\n\n    return tvShows[stateShowKey].loading;\n});\nconst getTvShowsError = createSelector(tvShowsState, (tvShows) => {\n    const isLoadingSearchResult = !!tvShows.search.value;\n    const stateShowKey = isLoadingSearchResult ? \"search\" : \"overview\";\n    return tvShows[stateShowKey].error;\n});\n\nconst getTvShowsSearchValue = createSelector(tvShowsState, (tvShows) => tvShows.search.value);\n\nconst selectTvShowById = createSelector([tvShowsState, (_, data) => data], (shows, data) => {\n    const { entities } = shows.items || {};\n    const { id } = data || {};\n    const showById = entities?.[id] || undefined;\n\n    return showById;\n});\n\nconst selectTvShowError = createSelector(tvShowsState, ({ items }) => items.error);\nconst selectTvShowLoading = createSelector(tvShowsState, ({ items }) => items.loading);\n\nconst selectLastUpdatedOnServerByShowId = createSelector([tvShowsState, (_, data) => data], (shows, data) => {\n    const { entities } = shows.lastUpdated || {};\n    const { id } = data || {};\n    const lastUpdated = entities?.[id] || undefined;\n\n    return lastUpdated;\n});\n\nconst getLastUpdatedLoaded = createSelector(tvShowsState, ({ lastUpdated }) => lastUpdated.loaded);\nconst getLastUpdatedLoading = createSelector(tvShowsState, ({ lastUpdated }) => lastUpdated.loading);\nconst getLastUpdatedError = createSelector(tvShowsState, ({ lastUpdated }) => lastUpdated.error);\nconst getLastFetchedTime = createSelector(tvShowsState, ({ lastUpdated }) => lastUpdated.lastFetchedTime);\n\nexport {\n    tvShowsState,\n    getTvShowsList,\n    getTvShowsLoading,\n    getTvShowsError,\n    getTvShowsSearchValue,\n    getLastUpdatedLoaded,\n    getLastUpdatedLoading,\n    getLastUpdatedError,\n    getLastFetchedTime,\n    selectTvShowById,\n    selectTvShowError,\n    selectTvShowLoading,\n    selectLastUpdatedOnServerByShowId,\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"tvShows_container__YtxWG\",\"unit\":\"tvShows_unit__hiGlr\"};","import { useEffect } from \"react\";\nimport loadable from \"@loadable/component\";\nimport { Loading } from \"@rrkallan/ui-library\";\nimport { fetchTvShowsLastUpdated } from \"features/TvShows/tvShowsSlice\";\nimport { getLastUpdatedLoaded, getLastFetchedTime, getLastUpdatedError } from \"features/TvShows/tvShowsSelector\";\nimport { useAppDispatch, useAppSelector } from \"Store/hooks\";\nimport { getDayDifference } from \"@rrkallan/js-helpers\";\nimport styles from \"./resources/styles/tvShows.module.scss\";\n\nconst Container = loadable(() => import(/* webpackChunkName: \"Container\" */ \"@rrkallan/ui-library/Container\"), {\n    fallback: <Loading />,\n});\n\nconst Notification = loadable(() => import(/* webpackChunkName: \"Notification\" */ \"@rrkallan/ui-library/Notification\"), {\n    fallback: <Loading />,\n});\n\nconst PageHeader = loadable(() => import(/* webpackChunkName: \"PageHeader\" */ \"components/PageHeader\"), {\n    fallback: <Loading />,\n});\n\nconst SearchFornm = loadable(() => import(/* webpackChunkName: \"SearchFornm\" */ \"./SearchForm\"), {\n    fallback: <Loading />,\n});\n\nconst TvShowsList = loadable(() => import(/* webpackChunkName: \"TvShowsList\" */ \"./TvShowsList\"), {\n    fallback: <Loading />,\n});\n\nfunction TvShows(): JSX.Element {\n    const dispatch = useAppDispatch();\n    const lastUpdatedLoaded = useAppSelector(getLastUpdatedLoaded);\n    const lastFetchedTime = useAppSelector(getLastFetchedTime);\n    const error = useAppSelector(getLastUpdatedError);\n\n    useEffect(() => {\n        const dayDifference = getDayDifference(lastFetchedTime) ?? -1;\n\n        if (!lastUpdatedLoaded || dayDifference || error) {\n            const urlParam = {\n                since:\n                    (dayDifference > 6 && \"week\") ||\n                    (dayDifference === 1 && \"day\") ||\n                    (dayDifference > 29 && undefined) ||\n                    (!dayDifference && undefined) ||\n                    undefined,\n            };\n\n            dispatch(fetchTvShowsLastUpdated({ urlParam }));\n        }\n    }, [dispatch, error, lastFetchedTime, lastUpdatedLoaded]);\n\n    return (\n        <>\n            <PageHeader>\n                <div className={styles.container}>\n                    <h1 className={styles.unit} variant=\"title\">\n                        Tv Shows\n                    </h1>\n                    <article className={styles.unit} variant=\"search\">\n                        <SearchFornm />\n                    </article>\n                </div>\n            </PageHeader>\n            {!!error && (\n                <Container>\n                    <Notification\n                        variant=\"error\"\n                        state=\"visible\"\n                        iconSize=\"normal\"\n                        icon={undefined}\n                        iconPosition=\"center\"\n                        showCloseButton={false}\n                        customOnClickHandlerCloseButton={undefined}\n                    >\n                        {error}\n                    </Notification>\n                </Container>\n            )}\n            <TvShowsList />\n        </>\n    );\n}\n\nexport default TvShows;\n","// Cache implementation based on Erik Rasmussen's `lru-memoize`:\n// https://github.com/erikras/lru-memoize\nvar NOT_FOUND = 'NOT_FOUND';\n\nfunction createSingletonCache(equals) {\n  var entry;\n  return {\n    get: function get(key) {\n      if (entry && equals(entry.key, key)) {\n        return entry.value;\n      }\n\n      return NOT_FOUND;\n    },\n    put: function put(key, value) {\n      entry = {\n        key: key,\n        value: value\n      };\n    },\n    getEntries: function getEntries() {\n      return entry ? [entry] : [];\n    },\n    clear: function clear() {\n      entry = undefined;\n    }\n  };\n}\n\nfunction createLruCache(maxSize, equals) {\n  var entries = [];\n\n  function get(key) {\n    var cacheIndex = entries.findIndex(function (entry) {\n      return equals(key, entry.key);\n    }); // We found a cached entry\n\n    if (cacheIndex > -1) {\n      var entry = entries[cacheIndex]; // Cached entry not at top of cache, move it to the top\n\n      if (cacheIndex > 0) {\n        entries.splice(cacheIndex, 1);\n        entries.unshift(entry);\n      }\n\n      return entry.value;\n    } // No entry found in cache, return sentinel\n\n\n    return NOT_FOUND;\n  }\n\n  function put(key, value) {\n    if (get(key) === NOT_FOUND) {\n      // TODO Is unshift slow?\n      entries.unshift({\n        key: key,\n        value: value\n      });\n\n      if (entries.length > maxSize) {\n        entries.pop();\n      }\n    }\n  }\n\n  function getEntries() {\n    return entries;\n  }\n\n  function clear() {\n    entries = [];\n  }\n\n  return {\n    get: get,\n    put: put,\n    getEntries: getEntries,\n    clear: clear\n  };\n}\n\nexport var defaultEqualityCheck = function defaultEqualityCheck(a, b) {\n  return a === b;\n};\nexport function createCacheKeyComparator(equalityCheck) {\n  return function areArgumentsShallowlyEqual(prev, next) {\n    if (prev === null || next === null || prev.length !== next.length) {\n      return false;\n    } // Do this in a for loop (and not a `forEach` or an `every`) so we can determine equality as fast as possible.\n\n\n    var length = prev.length;\n\n    for (var i = 0; i < length; i++) {\n      if (!equalityCheck(prev[i], next[i])) {\n        return false;\n      }\n    }\n\n    return true;\n  };\n}\n// defaultMemoize now supports a configurable cache size with LRU behavior,\n// and optional comparison of the result value with existing values\nexport function defaultMemoize(func, equalityCheckOrOptions) {\n  var providedOptions = typeof equalityCheckOrOptions === 'object' ? equalityCheckOrOptions : {\n    equalityCheck: equalityCheckOrOptions\n  };\n  var _providedOptions$equa = providedOptions.equalityCheck,\n      equalityCheck = _providedOptions$equa === void 0 ? defaultEqualityCheck : _providedOptions$equa,\n      _providedOptions$maxS = providedOptions.maxSize,\n      maxSize = _providedOptions$maxS === void 0 ? 1 : _providedOptions$maxS,\n      resultEqualityCheck = providedOptions.resultEqualityCheck;\n  var comparator = createCacheKeyComparator(equalityCheck);\n  var cache = maxSize === 1 ? createSingletonCache(comparator) : createLruCache(maxSize, comparator); // we reference arguments instead of spreading them for performance reasons\n\n  function memoized() {\n    var value = cache.get(arguments);\n\n    if (value === NOT_FOUND) {\n      // @ts-ignore\n      value = func.apply(null, arguments);\n\n      if (resultEqualityCheck) {\n        var entries = cache.getEntries();\n        var matchingEntry = entries.find(function (entry) {\n          return resultEqualityCheck(entry.value, value);\n        });\n\n        if (matchingEntry) {\n          value = matchingEntry.value;\n        }\n      }\n\n      cache.put(arguments, value);\n    }\n\n    return value;\n  }\n\n  memoized.clearCache = function () {\n    return cache.clear();\n  };\n\n  return memoized;\n}","import { defaultMemoize, defaultEqualityCheck } from './defaultMemoize';\nexport { defaultMemoize, defaultEqualityCheck };\n\nfunction getDependencies(funcs) {\n  var dependencies = Array.isArray(funcs[0]) ? funcs[0] : funcs;\n\n  if (!dependencies.every(function (dep) {\n    return typeof dep === 'function';\n  })) {\n    var dependencyTypes = dependencies.map(function (dep) {\n      return typeof dep === 'function' ? \"function \" + (dep.name || 'unnamed') + \"()\" : typeof dep;\n    }).join(', ');\n    throw new Error(\"createSelector expects all input-selectors to be functions, but received the following types: [\" + dependencyTypes + \"]\");\n  }\n\n  return dependencies;\n}\n\nexport function createSelectorCreator(memoize) {\n  for (var _len = arguments.length, memoizeOptionsFromArgs = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    memoizeOptionsFromArgs[_key - 1] = arguments[_key];\n  }\n\n  var createSelector = function createSelector() {\n    for (var _len2 = arguments.length, funcs = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      funcs[_key2] = arguments[_key2];\n    }\n\n    var _recomputations = 0;\n\n    var _lastResult; // Due to the intricacies of rest params, we can't do an optional arg after `...funcs`.\n    // So, start by declaring the default value here.\n    // (And yes, the words 'memoize' and 'options' appear too many times in this next sequence.)\n\n\n    var directlyPassedOptions = {\n      memoizeOptions: undefined\n    }; // Normally, the result func or \"output selector\" is the last arg\n\n    var resultFunc = funcs.pop(); // If the result func is actually an _object_, assume it's our options object\n\n    if (typeof resultFunc === 'object') {\n      directlyPassedOptions = resultFunc; // and pop the real result func off\n\n      resultFunc = funcs.pop();\n    }\n\n    if (typeof resultFunc !== 'function') {\n      throw new Error(\"createSelector expects an output function after the inputs, but received: [\" + typeof resultFunc + \"]\");\n    } // Determine which set of options we're using. Prefer options passed directly,\n    // but fall back to options given to createSelectorCreator.\n\n\n    var _directlyPassedOption = directlyPassedOptions,\n        _directlyPassedOption2 = _directlyPassedOption.memoizeOptions,\n        memoizeOptions = _directlyPassedOption2 === void 0 ? memoizeOptionsFromArgs : _directlyPassedOption2; // Simplifying assumption: it's unlikely that the first options arg of the provided memoizer\n    // is an array. In most libs I've looked at, it's an equality function or options object.\n    // Based on that, if `memoizeOptions` _is_ an array, we assume it's a full\n    // user-provided array of options. Otherwise, it must be just the _first_ arg, and so\n    // we wrap it in an array so we can apply it.\n\n    var finalMemoizeOptions = Array.isArray(memoizeOptions) ? memoizeOptions : [memoizeOptions];\n    var dependencies = getDependencies(funcs);\n    var memoizedResultFunc = memoize.apply(void 0, [function recomputationWrapper() {\n      _recomputations++; // apply arguments instead of spreading for performance.\n\n      return resultFunc.apply(null, arguments);\n    }].concat(finalMemoizeOptions)); // If a selector is called with the exact same arguments we don't need to traverse our dependencies again.\n\n    var selector = memoize(function dependenciesChecker() {\n      var params = [];\n      var length = dependencies.length;\n\n      for (var i = 0; i < length; i++) {\n        // apply arguments instead of spreading and mutate a local list of params for performance.\n        // @ts-ignore\n        params.push(dependencies[i].apply(null, arguments));\n      } // apply arguments instead of spreading for performance.\n\n\n      _lastResult = memoizedResultFunc.apply(null, params);\n      return _lastResult;\n    });\n    Object.assign(selector, {\n      resultFunc: resultFunc,\n      memoizedResultFunc: memoizedResultFunc,\n      dependencies: dependencies,\n      lastResult: function lastResult() {\n        return _lastResult;\n      },\n      recomputations: function recomputations() {\n        return _recomputations;\n      },\n      resetRecomputations: function resetRecomputations() {\n        return _recomputations = 0;\n      }\n    });\n    return selector;\n  }; // @ts-ignore\n\n\n  return createSelector;\n}\nexport var createSelector = /* #__PURE__ */createSelectorCreator(defaultMemoize);\n// Manual definition of state and output arguments\nexport var createStructuredSelector = function createStructuredSelector(selectors, selectorCreator) {\n  if (selectorCreator === void 0) {\n    selectorCreator = createSelector;\n  }\n\n  if (typeof selectors !== 'object') {\n    throw new Error('createStructuredSelector expects first argument to be an object ' + (\"where each property is a selector, instead received a \" + typeof selectors));\n  }\n\n  var objectKeys = Object.keys(selectors);\n  var resultSelector = selectorCreator( // @ts-ignore\n  objectKeys.map(function (key) {\n    return selectors[key];\n  }), function () {\n    for (var _len3 = arguments.length, values = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n      values[_key3] = arguments[_key3];\n    }\n\n    return values.reduce(function (composition, value, index) {\n      composition[objectKeys[index]] = value;\n      return composition;\n    }, {});\n  });\n  return resultSelector;\n};"],"names":["useAppDispatch","useDispatch","useAppSelector","useSelector","tvShowsState","tvShows","getTvShowsList","createSelector","search","value","entities","getTvShowsLoading","loading","getTvShowsError","error","getTvShowsSearchValue","selectTvShowById","_","data","shows","items","id","undefined","selectLastUpdatedOnServerByShowId","lastUpdated","getLastUpdatedLoaded","loaded","getLastUpdatedError","getLastFetchedTime","lastFetchedTime","Container","loadable","fallback","Notification","PageHeader","SearchFornm","TvShowsList","dispatch","lastUpdatedLoaded","useEffect","dayDifference","getDayDifference","urlParam","since","fetchTvShowsLastUpdated","className","styles","variant","state","iconSize","icon","iconPosition","showCloseButton","customOnClickHandlerCloseButton","NOT_FOUND","defaultEqualityCheck","a","b","defaultMemoize","func","equalityCheckOrOptions","providedOptions","equalityCheck","_providedOptions$equa","_providedOptions$maxS","maxSize","resultEqualityCheck","comparator","prev","next","length","i","createCacheKeyComparator","cache","equals","entry","get","key","put","getEntries","clear","createSingletonCache","entries","cacheIndex","findIndex","splice","unshift","pop","createLruCache","memoized","arguments","apply","matchingEntry","find","clearCache","getDependencies","funcs","dependencies","Array","isArray","every","dep","dependencyTypes","map","name","join","Error","createSelectorCreator","memoize","_len","memoizeOptionsFromArgs","_key","_len2","_key2","_lastResult","_recomputations","directlyPassedOptions","memoizeOptions","resultFunc","_directlyPassedOption","_directlyPassedOption2","finalMemoizeOptions","memoizedResultFunc","concat","selector","params","push","Object","assign","lastResult","recomputations","resetRecomputations"],"sourceRoot":""}