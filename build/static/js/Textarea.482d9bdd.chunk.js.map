{"version":3,"file":"static/js/Textarea.482d9bdd.chunk.js","mappings":"sLACA,EAA4B,4BAA5B,EAAgE,wBAAhE,EAAgG,wBAAhG,EAAmI,2BAAnI,EAAkL,oCAAlL,EAAiO,2BAAjO,EAAyQ,6BAAzQ,EAA6S,uB,SC6F7S,MAzFA,YAYoC,IAZlB,GACdA,EADc,MAEdC,EAFc,KAGdC,EAHc,aAIdC,EAAe,GAJD,SAKdC,GAAW,EALG,SAMdC,GAAW,EANG,SAOdC,GAAW,EAPG,gBAQdC,EARc,aASdC,EAAe,mBATD,aAUdC,EAAe,MAVD,sBAWdC,GAC+B,EAC/B,MAAOC,EAAeC,IAAoBC,EAAAA,EAAAA,WAAS,IAAMV,KAClDW,EAAkBC,IAAuBF,EAAAA,EAAAA,WAAS,KAAD,KACjDG,EAAgBC,IAAqBJ,EAAAA,EAAAA,WAAS,IAAOP,EAAW,UAAY,aAC5EY,EAAcC,IAAmBN,EAAAA,EAAAA,WAAS,IAAOV,EAAe,SAAW,gBAmClF,OANAiB,EAAAA,EAAAA,YAAU,KACN,MAAMC,EAAe,CAAChB,EAAW,gBAAaiB,EAAWlB,EAAW,iBAAckB,GAAWC,KAAK,KAAKC,aAAUF,EAEjHP,EAAoBM,EAApB,GACD,CAAChB,EAAUD,KAGV,qBAASqB,UAAWC,EAApB,WACI,oBAASD,UAAWC,EAAcC,QAAST,EAA3C,UACI,kBAAOU,QAAS1B,EAAMuB,UAAWC,EAAjC,SACKzB,OAGT,sBAAUwB,UAAWC,EAAiBC,QAASb,EAAkBe,MAAOb,EAAxE,WACI,mBAAQS,UAAWC,EAAcC,QAAST,EAA1C,SACKjB,KAEL,gBAAKwB,UAAWC,EAAhB,UACI,qBACI1B,GAAE,UAAKE,EAAL,YAAaF,GACfyB,UAAWC,EACXxB,KAAMA,EACN4B,MAAOnB,EACPL,SAAUA,EACVD,SAAUA,EACVD,SAAUA,EACVK,aAAcA,EACdsB,SAtDKC,IACrB,MAAM,MAAEF,GAAUE,EAAMC,cAClBC,GAAeC,EAAAA,EAAAA,IAA0BL,GAE/ClB,EAAiBkB,GAEbpB,GAA4D,cAAnC0B,EAAAA,EAAAA,IAAQ1B,IAAuCA,EAAsBwB,EAAtB,EAiD5DG,QA9CG,KACnBlB,EAAgB,mBAChBF,EAAkB,aAAlB,EA6CgBqB,OA1CE,KAClB,MAAMR,GAAQK,EAAAA,EAAAA,IAA0BxB,GAGxCQ,EAFgBW,EAAQ,SAAW,eAGnClB,EAAiBkB,GAEjB,IAAIS,EAAeC,EAAAA,GAAAA,QAAoBV,KAAWxB,EAAW,WAAYmC,EAAAA,EAAAA,IAAelC,EAAiBuB,GACrGU,EAAAA,GAAAA,QAAoBV,IAAUxB,IAAUiC,EAAe,WAE3DtB,EAAkBsB,EAAlB,EAiCgB,gBAAejC,QAAYgB,EAC3B,wBAAoD,YAA7Bc,EAAAA,EAAAA,IAAQ7B,GAAgCmC,KAAKC,UAAUpC,QAAmBe,UAI7G,gBAAKG,UAAWC,EAAhB,UACI,iBAAMD,UAAWC,EAAaG,MAA0B,YAAnBb,EAA+B,UAAY,SAAhF,SACKR,QAKpB,C","sources":["webpack://rrkallan-demo/./src/@rrkallan/ui-library/FormElements/Textarea/resources/styles/textarea.module.scss?8948","@rrkallan/ui-library/FormElements/Textarea/index.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"container\":\"textarea_container__J0lmc\",\"label\":\"textarea_label__y1145\",\"title\":\"textarea_title__mvuCp\",\"fieldset\":\"textarea_fieldset__Hi+qw\",\"textareaContainer\":\"textarea_textareaContainer__TC0Gw\",\"textarea\":\"textarea_textarea__XypqD\",\"helperText\":\"textarea_helperText__T6G6k\",\"text\":\"textarea_text__v4cF+\"};","import { useState, useEffect, ChangeEvent } from \"react\";\nimport { getType, isElementValid, validations, clearEmptyCharsOnBothEnds } from \"@rrkallan/js-helpers\";\nimport InterfaceTextarea from \"./types\";\nimport styles from \"./resources/styles/textarea.module.scss\";\n\nfunction Textarea({\n    id,\n    title,\n    name,\n    defaultValue = \"\",\n    readOnly = false,\n    disabled = false,\n    required = false,\n    validationTypes = undefined,\n    errorMessage = \"Incorrect entry.\",\n    autoComplete = \"off\",\n    customOnChangeHandler = undefined,\n}: InterfaceTextarea): JSX.Element {\n    const [textareaValue, setTextareaValue] = useState(() => defaultValue);\n    const [containerVariant, setContainerVariant] = useState((): string | undefined => undefined);\n    const [containerState, setContainerState] = useState(() => (required ? \"isEmpty\" : \"isValid\"));\n    const [titleVariant, setTitleVariant] = useState(() => (defaultValue ? \"legend\" : \"placeholder\"));\n\n    const onChangeHandler = (event: ChangeEvent<HTMLTextAreaElement>) => {\n        const { value } = event.currentTarget;\n        const valueTrimmed = clearEmptyCharsOnBothEnds(value);\n\n        setTextareaValue(value);\n\n        if (customOnChangeHandler && getType(customOnChangeHandler) === \"function\") customOnChangeHandler(valueTrimmed);\n    };\n\n    const onFocusHandler = () => {\n        setTitleVariant(\"legend focussed\");\n        setContainerState(\"isFocussed\");\n    };\n\n    const onBlurHandler = () => {\n        const value = clearEmptyCharsOnBothEnds(textareaValue);\n        const variant = value ? \"legend\" : \"placeholder\";\n\n        setTitleVariant(variant);\n        setTextareaValue(value);\n\n        let elementState = validations.isEmpty(value) && !required ? \"isValid\" : isElementValid(validationTypes, value);\n        if (validations.isEmpty(value) && required) elementState = \"inValid\";\n\n        setContainerState(elementState);\n    };\n\n    useEffect(() => {\n        const variantValue = [disabled ? \"disabled\" : undefined, readOnly ? \"read-only\" : undefined].join(\" \").trim() || undefined;\n\n        setContainerVariant(variantValue);\n    }, [disabled, readOnly]);\n\n    return (\n        <section className={styles.container}>\n            <article className={styles.label} variant={titleVariant}>\n                <label htmlFor={name} className={styles.title}>\n                    {title}\n                </label>\n            </article>\n            <fieldset className={styles.fieldset} variant={containerVariant} state={containerState}>\n                <legend className={styles.title} variant={titleVariant}>\n                    {title}\n                </legend>\n                <div className={styles.textareaContainer}>\n                    <textarea\n                        id={`${name}-${id}`}\n                        className={styles.textarea}\n                        name={name}\n                        value={textareaValue}\n                        required={required}\n                        disabled={disabled}\n                        readOnly={readOnly}\n                        autoComplete={autoComplete}\n                        onChange={onChangeHandler}\n                        onFocus={onFocusHandler}\n                        onBlur={onBlurHandler}\n                        data-required={required || undefined}\n                        data-validation-types={getType(validationTypes) === \"object\" ? JSON.stringify(validationTypes) : undefined}\n                    />\n                </div>\n            </fieldset>\n            <div className={styles.helperText}>\n                <span className={styles.text} state={containerState === \"inValid\" ? \"visible\" : \"hidden\"}>\n                    {errorMessage}\n                </span>\n            </div>\n        </section>\n    );\n}\n\nexport default Textarea;\n"],"names":["id","title","name","defaultValue","readOnly","disabled","required","validationTypes","errorMessage","autoComplete","customOnChangeHandler","textareaValue","setTextareaValue","useState","containerVariant","setContainerVariant","containerState","setContainerState","titleVariant","setTitleVariant","useEffect","variantValue","undefined","join","trim","className","styles","variant","htmlFor","state","value","onChange","event","currentTarget","valueTrimmed","clearEmptyCharsOnBothEnds","getType","onFocus","onBlur","elementState","validations","isElementValid","JSON","stringify"],"sourceRoot":""}