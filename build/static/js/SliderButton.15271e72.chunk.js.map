{"version":3,"file":"static/js/SliderButton.15271e72.chunk.js","mappings":"uLACA,EAA4B,gCAA5B,EAAuE,+BAAvE,EAAqH,mCAArH,EAA+J,2BAA/J,EAAmM,6B,SCKnM,SAASA,EAAT,GAA+H,IAAzG,GAAEC,EAAF,MAAMC,EAAN,aAAaC,EAAb,KAA2BC,EAA3B,SAAiCC,EAAjC,SAA2CC,EAA3C,gBAAqDC,EAArD,WAAsEC,EAAtE,YAAkFC,EAAlF,MAA+FC,GAAS,EAC1H,MAAOC,EAAcC,IAAmBC,EAAAA,EAAAA,WAAS,KAAM,KAChDC,EAAWC,IAAgBF,EAAAA,EAAAA,WAAS,IAAMX,IAE3Cc,EAAsB,IAAMX,GAAYC,EA2BxCW,EAAe,IAAML,GAAgB,GAErCM,EAAgB,IAAMN,GAAgB,GAyB5C,OARAO,EAAAA,EAAAA,YAAU,KACFX,GAAYO,EAAaZ,EAAb,GACjB,CAACK,EAAYL,KAEhBgB,EAAAA,EAAAA,YAAU,KACFV,GAAaM,EAAab,EAAb,GAClB,CAACO,EAAaP,KAGb,iBAAKkB,UAAWC,EAAhB,WACI,kBACIpB,GAAE,UAAKG,EAAL,YAAaH,GACfmB,UAAWC,EACXjB,KAAMA,EACNkB,KAAK,WACLC,SA3DYC,IAEpB,GADmBR,IACH,OAEhB,MAAMS,EAAUD,EAAME,eAChB,QAAEC,GAAYF,GAAW,CAAC,EAEhCV,EAAaY,GAEoB,cAA7BC,EAAAA,EAAAA,IAAQrB,IAAiCA,EAAgBiB,EAAhB,EAmDrCK,QAhDYL,IAEpB,GADmBR,IACH,OAEhB,MAAMS,EAAUD,EAAME,eAChB,QAAEC,GAAYF,GAAW,CAAC,EAGhCV,GAFkBY,GAIbhB,GAAca,EAAME,cAAcI,MAApB,EAuCXC,QAASd,EACTe,OAAQd,EACRS,QAASb,EACTT,SAAUA,EACVC,SAAUA,KAEd,oBACIc,UAAWC,EACXC,KAAK,SACLO,QAzCkBL,IAE1B,GADmBR,IACH,OAEhB,MAAMS,EAAUD,EAAME,cAEhBC,GADeM,KAAKC,OAAa,OAAPT,QAAO,IAAPA,OAAA,EAAAA,EAASvB,SAAS,GAG7CS,GAAca,EAAME,cAAcI,OAEvCf,EAAaY,GAEoB,cAA7BC,EAAAA,EAAAA,IAAQrB,IAAiCA,EAAgBiB,EAAhB,EA8BrCO,QAASd,EACTe,OAAQd,EACRhB,MAAOY,EACPV,KAAMA,EAPV,YASOM,IAAS,0BAAMyB,EAAAA,EAAAA,IAAQzB,MAE1B,gBAAKU,UAAWC,EAAhB,UACI,gBAAKD,UAAWC,WAKnC,CAEDrB,EAAaoC,aAAe,CACxB7B,qBAAiB8B,EACjBnC,OAAO,EACPC,cAAc,EACdE,UAAU,EACVC,UAAU,EACVG,aAAa,EACbD,YAAY,EACZ8B,YAAa,CACTC,KAAM,OACNC,MAAO,UAqBf,O","sources":["webpack://rrkallan-demo/./src/@rrkallan/ui-library/FormElements/SliderButton/resources/styles/sliderButton.module.scss?6ce4","@rrkallan/ui-library/FormElements/SliderButton/index.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"container\":\"sliderButton_container__a2Bwl\",\"checkbox\":\"sliderButton_checkbox__yz+Cb\",\"sliderButton\":\"sliderButton_sliderButton__SVj4d\",\"unit\":\"sliderButton_unit__u83pf\",\"circle\":\"sliderButton_circle__6hTMf\",\"content\":\"sliderButton_content__7op0E\",\"labelText\":\"sliderButton_labelText__GLsaM\",\"text\":\"sliderButton_text__rYM4+\",\"icon\":\"sliderButton_icon__DYm+m\"};","import { useState, useEffect } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { getType, ucFirst } from \"@rrkallan/js-helpers\";\n\nimport styles from \"./resources/styles/sliderButton.module.scss\";\n\nfunction SliderButton({ id, value, defaultValue, name, disabled, readOnly, onChangeHandler, clearValue, updateValue, title }) {\n    const [isKeyHandler, setIsKeyHandler] = useState(() => false);\n    const [isChecked, setIsChecked] = useState(() => value);\n\n    const slideButtonInActive = () => disabled || readOnly;\n\n    const handleOnChange = (event) => {\n        const isInActive = slideButtonInActive();\n        if (isInActive) return;\n\n        const element = event.currentTarget;\n        const { checked } = element || {};\n\n        setIsChecked(checked);\n\n        if (getType(onChangeHandler) === \"function\") onChangeHandler(event);\n    };\n\n    const onClickHandler = (event) => {\n        const isInActive = slideButtonInActive();\n        if (isInActive) return;\n\n        const element = event.currentTarget;\n        const { checked } = element || {};\n        const newValue = !checked;\n\n        setIsChecked(newValue);\n\n        if (!isKeyHandler) event.currentTarget.blur();\n    };\n\n    const onKeyHandler = () => setIsKeyHandler(true);\n\n    const onBlurHandler = () => setIsKeyHandler(false);\n\n    const onClickHandlerButton = (event) => {\n        const isInActive = slideButtonInActive();\n        if (isInActive) return;\n\n        const element = event.currentTarget;\n        const elementValue = JSON.parse(element?.value || false);\n        const checked = !elementValue;\n\n        if (!isKeyHandler) event.currentTarget.blur();\n\n        setIsChecked(checked);\n\n        if (getType(onChangeHandler) === \"function\") onChangeHandler(event);\n    };\n\n    useEffect(() => {\n        if (clearValue) setIsChecked(defaultValue);\n    }, [clearValue, defaultValue]);\n\n    useEffect(() => {\n        if (updateValue) setIsChecked(value);\n    }, [updateValue, value]);\n\n    return (\n        <div className={styles.container}>\n            <input\n                id={`${name}-${id}`}\n                className={styles.checkbox}\n                name={name}\n                type=\"checkbox\"\n                onChange={handleOnChange}\n                onClick={onClickHandler}\n                onKeyUp={onKeyHandler}\n                onBlur={onBlurHandler}\n                checked={isChecked}\n                disabled={disabled}\n                readOnly={readOnly}\n            />\n            <button\n                className={styles.sliderButton}\n                type=\"button\"\n                onClick={onClickHandlerButton}\n                onKeyUp={onKeyHandler}\n                onBlur={onBlurHandler}\n                value={isChecked}\n                name={name}\n            >\n                {!!title && <div>{ucFirst(title)}</div>}\n\n                <div className={styles.unit}>\n                    <div className={styles.circle} />\n                </div>\n            </button>\n        </div>\n    );\n}\n\nSliderButton.defaultProps = {\n    onChangeHandler: undefined,\n    value: false,\n    defaultValue: false,\n    disabled: false,\n    readOnly: false,\n    updateValue: false,\n    clearValue: false,\n    valueObject: {\n        true: \"true\",\n        false: \"false\",\n    },\n};\n\nSliderButton.propTypes = {\n    id: PropTypes.number.isRequired,\n    onChangeHandler: PropTypes.func,\n    value: PropTypes.bool,\n    defaultValue: PropTypes.bool,\n    name: PropTypes.string.isRequired,\n    disabled: PropTypes.bool,\n    readOnly: PropTypes.bool,\n    updateValue: PropTypes.bool,\n    clearValue: PropTypes.bool,\n    title: PropTypes.string.isRequired,\n    valueObject: PropTypes.shape({\n        true: PropTypes.string,\n        false: PropTypes.string,\n    }),\n};\n\nexport default SliderButton;\n"],"names":["SliderButton","id","value","defaultValue","name","disabled","readOnly","onChangeHandler","clearValue","updateValue","title","isKeyHandler","setIsKeyHandler","useState","isChecked","setIsChecked","slideButtonInActive","onKeyHandler","onBlurHandler","useEffect","className","styles","type","onChange","event","element","currentTarget","checked","getType","onClick","blur","onKeyUp","onBlur","JSON","parse","ucFirst","defaultProps","undefined","valueObject","true","false"],"sourceRoot":""}