{"version":3,"file":"static/js/ContactForm.9d47471f.chunk.js","mappings":"kPA2FA,EA3FoB,CAChBA,WAAY,CACRC,OAAQ,MACRC,KAAM,eACNC,aAAc,MACd,iBAAiB,EACjBC,YAAQC,EACRC,YAAY,GAEhBC,UAAW,CACP,CACIC,GAAI,EACJC,QAAS,KACTC,UAAU,EACVC,KAAM,KACNT,KAAM,KACNU,QAAS,MACTC,SAAU,CACN,CACIL,GAAI,EACJN,KAAM,OACNY,MAAO,OACPC,KAAM,OACNC,UAAU,EACVC,gBAAiB,CACbC,+BAAgC,CAAEC,cAAe,EAAGC,cAAe,MAEvEC,kBAAchB,EACdK,UAAU,EACVY,KAAM,SAEV,CACId,GAAI,EACJN,KAAM,QACNY,MAAO,eACPC,KAAM,QACNC,UAAU,EACVC,gBAAiB,CACbC,+BAAgC,CAAEC,cAAe,EAAGC,cAAe,KACnEG,MAAO,IAEXF,kBAAchB,EACdK,UAAU,EACVY,KAAM,WAKlB,CACId,GAAI,EACJC,QAAS,KACTC,UAAU,EACVC,KAAM,KACNT,KAAM,KACNU,QAAS,SACTC,SAAU,CACN,CACIL,GAAI,EACJN,KAAM,UACNY,MAAO,UACPE,UAAU,EACVC,gBAAiB,CACbC,+BAAgC,CAAEC,cAAe,EAAGC,cAAe,OAEvEC,kBAAchB,EACdK,UAAU,EACVY,KAAM,cAIlB,CACId,GAAI,EACJC,QAAS,KACTC,UAAU,EACVC,KAAM,KACNT,KAAM,KACNU,QAAS,cACTC,SAAU,CACN,CACIL,GAAI,EACJc,KAAM,SACNP,KAAM,SACNS,KAAM,SACNC,UAAU,mCACVf,UAAU,OC/ExBgB,GAAOC,EAAAA,EAAAA,KAAS,kBAAM,gCAAyE,CACjGC,UAAU,SAACC,EAAA,EAAD,MAGRC,GAAeH,EAAAA,EAAAA,KAAS,kBAAM,gCAAoF,CACpHC,UAAU,SAACC,EAAA,EAAD,MAwDd,MArDA,WACI,OAAsDE,EAAAA,EAAAA,WAAS,eAA/D,eAAOC,EAAP,KAA4BC,EAA5B,KACA,GAAkDF,EAAAA,EAAAA,WAAS,iBAAM,YAAjE,eAAOG,EAAP,KAA0BC,EAA1B,KACA,GAAsDJ,EAAAA,EAAAA,WAAS,eAA/D,eAAOK,EAAP,KAA4BC,EAA5B,KACA,GAA8BN,EAAAA,EAAAA,WAAS,kBAAM,KAA7C,eAAOO,EAAP,KAAgBC,EAAhB,KAEMC,EAAmB,yCAAG,WAAOC,GAAP,mFACxBF,GAAW,kBAAM,KADO,SAEHE,EAFG,OAElBC,EAFkB,OAGxBT,GAAuB,kBAAOS,EAAOC,GAAK,UAAY,WACtDN,GAAuB,WAEnB,OADgBK,EAAOC,GAAK,qDAAuD,6BAIvFC,YAAW,WACPT,GAAqB,iBAAM,aAC3BI,GAAW,kBAAM,OAClB,KAZqB,2CAAH,sDAezB,OACI,gCACKD,IAAW,SAACT,EAAA,EAAD,MACTO,IAAwBE,IACvB,SAACR,EAAD,CACIlB,QAASoB,EACTa,MAAOX,EACPY,SAAS,SACTC,KAAMf,EAAsB,UAAY,QACxCgB,aAAa,SACbC,iBAAiB,EACjBC,qCAAiC7C,EAPrC,SASK+B,GAAuB,MAG9BE,GAAmC,YAAxBN,IACT,SAACN,GAAD,gBACIyB,wBAAoB9C,EACpBmC,oBAAqBA,EACrBY,iBAAa/C,EACbgD,eAAWhD,EACXiD,0BAAsBjD,GAClBkD,GANR,IAOIC,qBAAqB,EACrBC,cAAUpD","sources":["components/Contact/ContactForm/constants/contactForm.js","components/Contact/ContactForm/index.tsx"],"sourcesContent":["const contactForm = {\n    attributes: {\n        method: \"get\",\n        name: \"contact-form\",\n        autoComplete: \"off\",\n        \"data-required\": true,\n        action: undefined,\n        noValidate: true,\n    },\n    fieldsets: [\n        {\n            id: 1,\n            caption: null,\n            disabled: false,\n            form: null,\n            name: null,\n            variant: \"row\",\n            elements: [\n                {\n                    id: 1,\n                    name: \"name\",\n                    title: \"Name\",\n                    type: \"text\",\n                    required: true,\n                    validationTypes: {\n                        hasMinimalAndMaximalCharacters: { minCharacters: 2, maxCharacters: 256 },\n                    },\n                    defaultValue: undefined,\n                    disabled: false,\n                    node: \"input\",\n                },\n                {\n                    id: 2,\n                    name: \"email\",\n                    title: \"Emailaddress\",\n                    type: \"email\",\n                    required: true,\n                    validationTypes: {\n                        hasMinimalAndMaximalCharacters: { minCharacters: 2, maxCharacters: 256 },\n                        email: {},\n                    },\n                    defaultValue: undefined,\n                    disabled: false,\n                    node: \"input\",\n                },\n            ],\n        },\n\n        {\n            id: 2,\n            caption: null,\n            disabled: false,\n            form: null,\n            name: null,\n            variant: \"column\",\n            elements: [\n                {\n                    id: 3,\n                    name: \"message\",\n                    title: \"Message\",\n                    required: true,\n                    validationTypes: {\n                        hasMinimalAndMaximalCharacters: { minCharacters: 2, maxCharacters: 2048 },\n                    },\n                    defaultValue: undefined,\n                    disabled: false,\n                    node: \"textarea\",\n                },\n            ],\n        },\n        {\n            id: 3,\n            caption: null,\n            disabled: false,\n            form: null,\n            name: null,\n            variant: \"row-reverse\",\n            elements: [\n                {\n                    id: 1,\n                    node: \"button\",\n                    type: \"submit\",\n                    text: \"Submit\",\n                    children: <span>Send</span>,\n                    disabled: true,\n                },\n            ],\n        },\n    ],\n};\n\nexport default contactForm;\n","import { useState } from \"react\";\nimport loadable from \"@loadable/component\";\nimport Loading from \"@rrkallan/ui-library/Loading\";\nimport formData from \"./constants/contactForm\";\n\nconst Form = loadable(() => import(/* webpackChunkName: \"LoginForm\" */ \"@rrkallan/ui-library/Form\"), {\n    fallback: <Loading />,\n});\n\nconst Notification = loadable(() => import(/* webpackChunkName: \"Notification\" */ \"@rrkallan/ui-library/Notification\"), {\n    fallback: <Loading />,\n});\n\nfunction ContactForm(): JSX.Element {\n    const [notificationVariant, setNotificationVariant] = useState((): string | undefined => undefined);\n    const [notificationState, setNotificationState] = useState(() => \"hidden\");\n    const [notificationMessage, setNotificationMessage] = useState((): string | undefined => undefined);\n    const [loading, setLoading] = useState(() => false);\n\n    const customSubmitHandler = async (response: Promise<Response>) => {\n        setLoading(() => true);\n        const result = await response;\n        setNotificationVariant(() => (result.ok ? \"confirm\" : \"error\"));\n        setNotificationMessage(() => {\n            const message = result.ok ? \"Thanks for contacting us. We will soon contact you\" : \"Contact form has errors\";\n            return message;\n        });\n\n        setTimeout(() => {\n            setNotificationState(() => \"visible\");\n            setLoading(() => false);\n        }, 750);\n    };\n\n    return (\n        <>\n            {loading && <Loading />}\n            {!!notificationMessage && !loading && (\n                <Notification\n                    variant={notificationVariant}\n                    state={notificationState}\n                    iconSize=\"normal\"\n                    icon={notificationVariant ? \"confirm\" : \"alert\"}\n                    iconPosition=\"center\"\n                    showCloseButton={false}\n                    customOnClickHandlerCloseButton={undefined}\n                >\n                    {notificationMessage || \"\"}\n                </Notification>\n            )}\n            {!loading && notificationVariant !== \"confirm\" && (\n                <Form\n                    customEventHandler={undefined}\n                    customSubmitHandler={customSubmitHandler}\n                    disableForm={undefined}\n                    resetForm={undefined}\n                    submitButtonDisabled={undefined}\n                    {...formData}\n                    postFormWithApiCall={false}\n                    postData={undefined}\n                />\n            )}\n        </>\n    );\n}\n\nexport default ContactForm;\n"],"names":["attributes","method","name","autoComplete","action","undefined","noValidate","fieldsets","id","caption","disabled","form","variant","elements","title","type","required","validationTypes","hasMinimalAndMaximalCharacters","minCharacters","maxCharacters","defaultValue","node","email","text","children","Form","loadable","fallback","Loading","Notification","useState","notificationVariant","setNotificationVariant","notificationState","setNotificationState","notificationMessage","setNotificationMessage","loading","setLoading","customSubmitHandler","response","result","ok","setTimeout","state","iconSize","icon","iconPosition","showCloseButton","customOnClickHandlerCloseButton","customEventHandler","disableForm","resetForm","submitButtonDisabled","formData","postFormWithApiCall","postData"],"sourceRoot":""}