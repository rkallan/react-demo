{"version":3,"file":"static/js/InputTypeText.a6107de7.chunk.js","mappings":"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","sources":["webpack://rrkallan-demo/./src/@rrkallan/ui-library/FormElements/InputfieldText/resources/styles/inputfieldText.module.scss?f36c","@rrkallan/ui-library/FormElements/InputfieldText/index.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"container\":\"inputfieldText_container__wLsCc\",\"label\":\"inputfieldText_label__4Wh2w\",\"title\":\"inputfieldText_title__8ayzZ\",\"fieldset\":\"inputfieldText_fieldset__69Ji5\",\"icon\":\"inputfieldText_icon__nSLQ-\",\"inputContainer\":\"inputfieldText_inputContainer__8RSMw\",\"input\":\"inputfieldText_input__DAT7h\",\"iconValidated\":\"inputfieldText_iconValidated__gaS6l\",\"text\":\"inputfieldText_text__mKDY-\"};","import { useState, useEffect, ChangeEventHandler, FocusEventHandler } from \"react\";\nimport loadable from \"@loadable/component\";\nimport { getType, isElementValid, validations, clearEmptyCharsOnBothEnds } from \"@rrkallan/js-helpers\";\nimport { Loading } from \"@rrkallan/ui-library\";\nimport InterfaceInputfieldText from \"./types\";\nimport type { TypesElememtStateProps, TypesGetValueProps } from \"./types\";\nimport styles from \"./resources/styles/inputfieldText.module.scss\";\n\nconst Icons = loadable(() => import(/* webpackChunkName: \"MainRoutes\" */ \"@rrkallan/ui-library/Icons\"), {\n    fallback: <Loading />,\n});\n\nfunction InputfieldText({\n    id,\n    title,\n    name,\n    defaultValue = \"\",\n    type = \"text\",\n    readOnly = false,\n    disabled = false,\n    required = false,\n    validationTypes = undefined,\n    autoComplete = \"off\",\n    max = undefined,\n    min = undefined,\n    step = undefined,\n    clearValue = false,\n    customOnChangeHandler = undefined,\n}: InterfaceInputfieldText): JSX.Element {\n    const [inputValue, setInputValue] = useState(() => defaultValue);\n    const [containerVariant, setContainerVariant] = useState((): string | undefined => undefined);\n    const [containerState, setContainerState] = useState(() => (required ? \"isEmpty\" : \"isValid\"));\n    const [iconValidated, setIconValidated] = useState((): string | undefined => undefined);\n    // const [icon, setIcon] = useState((): string | undefined => undefined);\n    const [inputState, setInputState] = useState(() => (required ? \"isEmpty\" : \"isValid\"));\n    const [titleVariant, setTitleVariant] = useState(() => (defaultValue ? \"legend\" : \"placeholder\"));\n    const [inputId] = useState(() => `${name}-${id}`);\n\n    const getValue = ({ value, valueAsNumber }: TypesGetValueProps): string | number => {\n        if ([NaN, Infinity].includes(valueAsNumber)) return clearEmptyCharsOnBothEnds(value);\n\n        return valueAsNumber;\n    };\n\n    const getElementState = ({ value }: TypesElememtStateProps) => {\n        const valueIsEmpty = validations.isEmpty(value);\n        if (valueIsEmpty && !required) return \"isValid\";\n        if (valueIsEmpty && required) return \"isEmpty\";\n\n        const elememtState = isElementValid(validationTypes, value);\n\n        return elememtState;\n    };\n\n    const onChangeHandler: ChangeEventHandler<HTMLInputElement> = (event) => {\n        const { value, valueAsNumber } = event.currentTarget;\n        const valueCorrected = getValue({ value, valueAsNumber });\n        const elementState = getElementState({ value: valueCorrected });\n\n        setInputValue(value);\n        setInputState(elementState);\n        if (customOnChangeHandler && getType(customOnChangeHandler) === \"function\") customOnChangeHandler(valueCorrected);\n    };\n\n    const onFocusHandler: FocusEventHandler<HTMLInputElement> = () => {\n        setTitleVariant(\"legend focussed\");\n        setContainerState(\"isFocussed\");\n\n        setIconValidated(() => undefined);\n    };\n\n    const onBlurHandler: FocusEventHandler<HTMLInputElement> = (event) => {\n        const { value, valueAsNumber } = event.currentTarget;\n        const valueCorrected = getValue({ value, valueAsNumber });\n\n        setInputValue(() => 1);\n        setTimeout(() => {\n            setInputValue(() => valueCorrected);\n        }, 1);\n\n        const variant = valueCorrected || valueCorrected === 0 ? \"legend\" : \"placeholder\";\n        const elementState = getElementState({ value: valueCorrected });\n\n        setTitleVariant(variant);\n        setContainerState(elementState);\n\n        if (required) {\n            setIconValidated(() => (elementState === \"isValid\" ? \"check\" : \"alert\"));\n        }\n    };\n\n    useEffect(() => {\n        let ignore = false;\n        const variantValue = [disabled ? \"disabled\" : undefined, readOnly ? \"read-only\" : undefined].join(\" \").trim() || undefined;\n\n        if (!ignore) setContainerVariant(variantValue);\n\n        return () => {\n            ignore = true;\n        };\n    }, [disabled, readOnly]);\n\n    useEffect(() => {\n        let ignore = false;\n        if (clearValue && !ignore) setInputValue(defaultValue || \"\");\n\n        return () => {\n            ignore = true;\n        };\n    }, [clearValue, defaultValue]);\n\n    return (\n        <section className={styles.container} state={type === \"hidden\" ? \"hidden\" : undefined}>\n            <article className={styles.label} variant={titleVariant}>\n                <label htmlFor={inputId} className={styles.title}>\n                    {title}\n                </label>\n            </article>\n            <fieldset className={styles.fieldset} variant={containerVariant} state={containerState}>\n                <legend className={styles.title} variant={titleVariant}>\n                    {title}\n                </legend>\n                <div className={styles.inputContainer}>\n                    <input\n                        id={inputId}\n                        className={styles.input}\n                        name={name}\n                        type={type}\n                        value={inputValue}\n                        required={required}\n                        disabled={disabled}\n                        readOnly={readOnly}\n                        autoComplete={autoComplete}\n                        min={type === \"number\" ? min : undefined}\n                        max={type === \"number\" ? max : undefined}\n                        step={type === \"number\" ? step || 1 : undefined}\n                        onChange={onChangeHandler}\n                        onFocus={onFocusHandler}\n                        onBlur={onBlurHandler}\n                        data-required={required || undefined}\n                        data-validation-types={getType(validationTypes) === \"object\" ? JSON.stringify(validationTypes) : undefined}\n                        state={inputState}\n                    />\n                </div>\n            </fieldset>\n            <div className={styles.iconValidated} state={[iconValidated ? \"visible\" : \"hidden\", containerState].join(\" \")}>\n                {!!iconValidated && (\n                    <>\n                        <Icons icon={iconValidated} svgProps={undefined} noContainer={undefined} variant=\"normal\" />\n                        <span className={styles.text}>{iconValidated === \"isValid\" ? \"correct\" : \"errror\"}</span>\n                    </>\n                )}\n            </div>\n        </section>\n    );\n}\n\nexport default InputfieldText;\n"],"names":["Icons","loadable","fallback","id","title","name","defaultValue","type","readOnly","disabled","required","validationTypes","undefined","autoComplete","max","min","step","clearValue","customOnChangeHandler","useState","inputValue","setInputValue","containerVariant","setContainerVariant","containerState","setContainerState","iconValidated","setIconValidated","inputState","setInputState","titleVariant","setTitleVariant","inputId","getValue","value","valueAsNumber","NaN","Infinity","includes","clearEmptyCharsOnBothEnds","getElementState","valueIsEmpty","validations","isElementValid","useEffect","ignore","variantValue","join","trim","className","styles","state","variant","htmlFor","onChange","event","currentTarget","valueCorrected","elementState","getType","onFocus","onBlur","setTimeout","JSON","stringify","icon","svgProps","noContainer"],"sourceRoot":""}