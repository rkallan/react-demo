{"version":3,"file":"static/js/Form.798717e4.chunk.js","mappings":"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","sources":["webpack://rrkallan-demo/./src/@rrkallan/ui-library/Form/resources/styles/form.module.scss?5edc","@rrkallan/ui-library/Form/index.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"container\":\"form_container__Kkhio\",\"unit\":\"form_unit__+m9tE\"};","import { useEffect, useState, useCallback } from \"react\";\nimport PropTypes from \"prop-types\";\nimport loadable from \"@loadable/component\";\n\nimport { serializeForm, formPostValidation, apiCall, getType, convertObjectKeys } from \"@rrkallan/js-helpers\";\nimport { useDebounce } from \"@rrkallan/react-hooks\";\nimport Loading from \"@rrkallan/ui-library/Loading\";\n\nimport styles from \"./resources/styles/form.module.scss\";\n\nconst InputTypeText = loadable(() => import(/* webpackChunkName: \"InputTypeText\" */ \"@rrkallan/ui-library/FormElements/InputfieldText\"), {\n    fallback: <Loading />,\n});\n\nconst SliderButton = loadable(() => import(/* webpackChunkName: \"SliderButton\" */ \"@rrkallan/ui-library/FormElements/SliderButton\"), {\n    fallback: <Loading />,\n});\n\nconst Button = loadable(() => import(/* webpackChunkName: \"Button\" */ \"@rrkallan/ui-library/FormElements/Button\"), {\n    fallback: <Loading />,\n});\n\nconst Textarea = loadable(() => import(/* webpackChunkName: \"Textarea\" */ \"@rrkallan/ui-library/FormElements/Textarea\"), {\n    fallback: <Loading />,\n});\n\nfunction Form({\n    attributes,\n    customEventHandler,\n    customSubmitHandler,\n    fieldsets,\n    disableForm,\n    postFormWithApiCall,\n    resetForm,\n    submitButtonDisabled,\n    postData,\n}) {\n    const [formElements, setFormElements] = useState([]);\n    const [buttonElements, setButtonElements] = useState([]);\n    const [formData, setFormData] = useState([]);\n    const [currentValue, setCurrentValue] = useState();\n    const [clearValue, setClearValue] = useState(false);\n    const [submitDisabled, setSubmitDisabled] = useState(submitButtonDisabled);\n    const [resetDisabled, setResetDisabled] = useState(true);\n    const debouncedCurrentValue = useDebounce(currentValue, 150);\n\n    const formValidation = useCallback(() => {\n        let hasError = 0;\n\n        if (!formElements.length) hasError += 1;\n\n        formElements.forEach((element) => {\n            if (element?.hasAttribute(\"state\") && element?.getAttribute(\"state\") !== \"isValid\") hasError += 1;\n        });\n\n        if (clearValue) setSubmitDisabled(true);\n\n        if (!clearValue) setSubmitDisabled(!!hasError);\n    }, [formElements, clearValue]);\n\n    const setElementsToState = (formObject, updateElements = false) => {\n        const totalElements = formElements.length + buttonElements.length;\n        if (formObject && (totalElements !== formObject.elements.length || updateElements)) {\n            const tempObject = [...formObject.elements].reduce(\n                (dataObject, element) => {\n                    const tempDataObject = dataObject;\n                    const { type } = element;\n                    const tagName = element.tagName.toLowerCase();\n\n                    if (element && (tagName === \"button\" || [\"submit\", \"reset\", \"button\"].includes(type)))\n                        tempDataObject.buttons.push(element);\n\n                    if (element && ![\"fieldset\", \"button\"].includes(tagName) && ![\"submit\", \"reset\", \"button\"].includes(type))\n                        tempDataObject.elements.push(element);\n\n                    return tempDataObject;\n                },\n                { elements: [], buttons: [] }\n            );\n\n            setButtonElements(tempObject.buttons);\n            setFormElements(tempObject.elements);\n\n            const data = fieldsets.reduce(\n                (dataObject, fieldset) => {\n                    const tempDataObject = dataObject;\n                    const { elements } = fieldset || {};\n\n                    tempDataObject.elements.push(...elements);\n\n                    return tempDataObject;\n                },\n                { attributes, elements: [] }\n            );\n\n            setFormData(data);\n\n            formValidation();\n        }\n    };\n\n    const setDisabledAttributeOnFieldsets = (disabled = true) => {\n        fieldsets.map((fieldset) => {\n            const currentFieldset = fieldset;\n            currentFieldset.disabled = disabled;\n\n            return disabled;\n        });\n    };\n\n    const handleFormInValid = (errorMessages) => {\n        const error = getType(errorMessages) === \"object\" ? Object.values(errorMessages) : [errorMessages];\n        const response = {\n            ok: false,\n            error,\n        };\n\n        setDisabledAttributeOnFieldsets(false);\n\n        return response;\n    };\n\n    const formApiCall = async ({ formPostUrl, data, method }) => {\n        const response = await apiCall({ url: formPostUrl, method, body: data });\n        const contentType = response?.headers?.get(\"content-type\")?.split(\";\")?.shift();\n        const isJsonResponse = contentType === \"application/json\";\n        const responseData = isJsonResponse\n            ? await response.json()\n            : { error: { message: \"System error contact your system administrator\" } };\n        const responseDataConverted = await convertObjectKeys({ data: responseData });\n\n        if (!response.ok) return handleFormInValid(responseDataConverted?.error);\n\n        return responseDataConverted;\n    };\n\n    const getResponse = async (formObject, data) => {\n        if (postFormWithApiCall) {\n            const { method } = formObject;\n            const formPostUrl = formObject.action;\n\n            const response = await formApiCall({ formPostUrl, data, method });\n\n            return response;\n        }\n\n        return {\n            ok: true,\n            status: 200,\n            data,\n        };\n    };\n\n    const disableButtons = useCallback(() => {\n        setSubmitDisabled(true);\n        setResetDisabled(true);\n    }, []);\n\n    const resetFormElements = useCallback(() => setClearValue(true), []);\n\n    const onResetHandler = () => {\n        disableButtons();\n        resetFormElements();\n    };\n\n    const onEventHandler = (event) => {\n        const formElement = event?.target;\n        const formObject = formElement?.form;\n        const formElementValue = formElement?.value || \"\";\n        const updateElementsInState = getType(customEventHandler) === \"function\" ? customEventHandler(event) : false;\n\n        if (clearValue) setClearValue(false);\n        if (currentValue !== formElementValue) setCurrentValue(formElementValue);\n\n        if (resetDisabled && event.type === \"change\") setResetDisabled(false);\n\n        setElementsToState(formObject, updateElementsInState);\n    };\n\n    const convertDataForAPI = (postDataObject) => {\n        const convertedData = Object.keys(postDataObject).reduce((data, key) => {\n            const newData = {\n                ...data,\n                [key]: postDataObject[key].values,\n            };\n\n            return newData;\n        }, {});\n\n        return convertedData;\n    };\n\n    const onSubmitHandler = (event) => {\n        event.preventDefault();\n        document.activeElement.blur();\n\n        disableButtons();\n        setDisabledAttributeOnFieldsets(true);\n\n        const formObject = event.currentTarget || event.target;\n        const formObjectData = serializeForm(formObject, formData);\n        const postDataObject = { ...postData, ...formObjectData.postData };\n        const errorMessages = formPostValidation(postDataObject);\n\n        if (errorMessages) {\n            const errorResponse = handleFormInValid(errorMessages);\n\n            if (customSubmitHandler) customSubmitHandler(errorResponse);\n            return;\n        }\n\n        const data = convertDataForAPI(postDataObject);\n        const response = getResponse(formObject, data);\n\n        formObject.reset();\n\n        if (customSubmitHandler) customSubmitHandler(response);\n\n        setDisabledAttributeOnFieldsets(false);\n        setClearValue(true);\n    };\n\n    useEffect(() => {\n        if ((debouncedCurrentValue || debouncedCurrentValue === \"\") && formElements) formValidation();\n    }, [debouncedCurrentValue, formElements, formValidation]);\n\n    useEffect(() => {\n        if (formElements) formValidation();\n    }, [formElements, formValidation]);\n\n    useEffect(() => {\n        setSubmitDisabled(submitButtonDisabled);\n    }, [submitButtonDisabled]);\n\n    useEffect(() => {\n        if (resetForm) {\n            disableButtons();\n            resetFormElements();\n        }\n    }, [disableButtons, resetForm, resetFormElements]);\n\n    return (\n        <form\n            {...attributes}\n            onSubmit={onSubmitHandler}\n            onReset={onResetHandler}\n            onChange={onEventHandler}\n            onFocus={onEventHandler}\n            onBlur={onEventHandler}\n        >\n            {fieldsets?.map((fieldset) => {\n                const { elements, disabled } = fieldset;\n                const disabledFieldset = disableForm || disabled || false;\n\n                return (\n                    <fieldset key={fieldset.id} className={styles.container} disabled={disabledFieldset}>\n                        <div className={styles.unit} variant={fieldset.variant || null}>\n                            {elements.map((formElement) => {\n                                const { id, node, ...element } = formElement;\n                                element.disabled = disabledFieldset || element.disabled;\n\n                                switch (node) {\n                                    case \"input\":\n                                        return <InputTypeText key={id} id={id} {...element} clearValue={clearValue} />;\n                                    case \"slider\":\n                                        return <SliderButton key={id} id={id} {...element} clearValue={clearValue} />;\n                                    case \"textarea\":\n                                        return <Textarea key={id} id={id} {...element} clearValue={clearValue} />;\n                                    case \"button\":\n                                        if (element.type === \"submit\") element.disabled = submitDisabled;\n\n                                        if (element.type === \"reset\") element.disabled = resetDisabled;\n\n                                        return <Button key={id} id={id} {...element} />;\n                                    default:\n                                        return null;\n                                }\n                            })}\n                        </div>\n                    </fieldset>\n                );\n            })}\n        </form>\n    );\n}\n\nForm.defaultProps = {\n    customEventHandler: undefined,\n    customSubmitHandler: undefined,\n    disableForm: false,\n    postFormWithApiCall: true,\n    resetForm: false,\n    submitButtonDisabled: true,\n    postData: undefined,\n};\n\nForm.propTypes = {\n    attributes: PropTypes.shape({}).isRequired,\n    customEventHandler: PropTypes.func,\n    customSubmitHandler: PropTypes.func,\n    fieldsets: PropTypes.arrayOf(PropTypes.shape({})).isRequired,\n    disableForm: PropTypes.bool,\n    postFormWithApiCall: PropTypes.bool,\n    resetForm: PropTypes.bool,\n    submitButtonDisabled: PropTypes.bool,\n    postData: PropTypes.shape({}),\n};\n\nexport default Form;\n"],"names":["InputTypeText","loadable","fallback","Loading","SliderButton","Button","Textarea","Form","attributes","customEventHandler","customSubmitHandler","fieldsets","disableForm","postFormWithApiCall","resetForm","submitButtonDisabled","postData","formElements","setFormElements","useState","buttonElements","setButtonElements","formData","setFormData","currentValue","setCurrentValue","clearValue","setClearValue","submitDisabled","setSubmitDisabled","resetDisabled","setResetDisabled","debouncedCurrentValue","useDebounce","formValidation","useCallback","hasError","length","forEach","element","hasAttribute","getAttribute","setDisabledAttributeOnFieldsets","disabled","map","fieldset","handleFormInValid","errorMessages","response","ok","error","getType","Object","values","getResponse","async","formObject","data","method","formPostUrl","action","apiCall","url","body","responseData","headers","get","split","shift","json","message","responseDataConverted","convertObjectKeys","formApiCall","status","disableButtons","resetFormElements","onEventHandler","event","formElement","target","form","formElementValue","value","updateElementsInState","type","updateElements","totalElements","elements","tempObject","reduce","dataObject","tempDataObject","tagName","toLowerCase","includes","buttons","push","setElementsToState","useEffect","onSubmit","preventDefault","document","activeElement","blur","currentTarget","formObjectData","serializeForm","postDataObject","formPostValidation","errorResponse","keys","key","convertDataForAPI","reset","onReset","onChange","onFocus","onBlur","disabledFieldset","className","styles","variant","id","node","defaultProps","undefined"],"sourceRoot":""}