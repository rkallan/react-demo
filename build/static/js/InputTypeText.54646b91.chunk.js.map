{"version":3,"file":"static/js/InputTypeText.54646b91.chunk.js","mappings":"2MACA,EAA4B,kCAA5B,EAAsE,8BAAtE,EAA4G,8BAA5G,EAAqJ,iCAArJ,EAA2O,uCAA3O,EAA0R,8BAA1R,EAAwU,sCAAxU,EAAqX,6B,SCOrX,MAAMA,GAAQC,EAAAA,EAAAA,KAAS,IAAM,gEAA2E,CACpGC,UAAU,SAAC,KAAD,MAoJd,MAjJA,YAgB0C,IAhBlB,GACpBC,EADoB,MAEpBC,EAFoB,KAGpBC,EAHoB,aAIpBC,EAAe,GAJK,KAKpBC,EAAO,OALa,SAMpBC,GAAW,EANS,SAOpBC,GAAW,EAPS,SAQpBC,GAAW,EARS,gBASpBC,EAToB,aAUpBC,EAAe,MAVK,IAWpBC,EAXoB,IAYpBC,EAZoB,KAapBC,EAboB,WAcpBC,GAAa,EAdO,sBAepBC,GACqC,EACrC,MAAOC,EAAYC,IAAiBC,EAAAA,EAAAA,WAAS,IAAMd,KAC5Ce,EAAkBC,IAAuBF,EAAAA,EAAAA,WAAS,KAAD,KACjDG,EAAgBC,IAAqBJ,EAAAA,EAAAA,WAAS,IAAOV,EAAW,UAAY,aAC5Ee,EAAeC,IAAoBN,EAAAA,EAAAA,WAAS,KAAD,KAE3CO,EAAYC,IAAiBR,EAAAA,EAAAA,WAAS,IAAOV,EAAW,UAAY,aACpEmB,EAAcC,IAAmBV,EAAAA,EAAAA,WAAS,IAAOd,EAAe,SAAW,iBAC3EyB,IAAWX,EAAAA,EAAAA,WAAS,cAASf,EAAT,YAAiBF,KAEtC6B,EAAW,IAAoE,IAAnE,MAAEC,EAAF,cAASC,GAAyD,EAChF,MAAI,CAACC,IAAKC,KAAUC,SAASH,IAAuBI,EAAAA,EAAAA,IAA0BL,GAEvEC,CAAP,EAGEK,EAAkB,IAAwC,IAAvC,MAAEN,GAAoC,EAC3D,MAAMO,EAAeC,EAAAA,GAAAA,QAAoBR,GACzC,GAAIO,IAAiB9B,EAAU,MAAO,UACtC,GAAI8B,GAAgB9B,EAAU,MAAO,UAIrC,OAFqBgC,EAAAA,EAAAA,IAAe/B,EAAiBsB,EAErD,EA4DJ,OApBAU,EAAAA,EAAAA,YAAU,KACN,IAAIC,GAAS,EACb,MAAMC,EAAe,CAACpC,EAAW,gBAAaqC,EAAWtC,EAAW,iBAAcsC,GAAWC,KAAK,KAAKC,aAAUF,EAIjH,OAFKF,GAAQtB,EAAoBuB,GAE1B,KACHD,GAAS,CAAT,CADJ,GAGD,CAACnC,EAAUD,KAEdmC,EAAAA,EAAAA,YAAU,KACN,IAAIC,GAAS,EAGb,OAFI5B,IAAe4B,GAAQzB,EAAcb,GAAgB,IAElD,KACHsC,GAAS,CAAT,CADJ,GAGD,CAAC5B,EAAYV,KAGZ,qBAAS2C,UAAWC,EAAkBC,MAAgB,WAAT5C,EAAoB,cAAWuC,EAA5E,WACI,oBAASG,UAAWC,EAAcE,QAASvB,EAA3C,UACI,kBAAOwB,QAAStB,EAASkB,UAAWC,EAApC,SACK9C,OAGT,sBAAU6C,UAAWC,EAAiBE,QAAS/B,EAAkB8B,MAAO5B,EAAxE,WACI,mBAAQ0B,UAAWC,EAAcE,QAASvB,EAA1C,SACKzB,KAEL,gBAAK6C,UAAWC,EAAhB,UACI,kBACI/C,GAAI4B,EACJkB,UAAWC,EACX7C,KAAMA,EACNE,KAAMA,EACN0B,MAAOf,EACPR,SAAUA,EACVD,SAAUA,EACVD,SAAUA,EACVI,aAAcA,EACdE,IAAc,WAATP,EAAoBO,OAAMgC,EAC/BjC,IAAc,WAATN,EAAoBM,OAAMiC,EAC/B/B,KAAe,WAATR,EAAoBQ,GAAQ,OAAI+B,EACtCQ,SAlF2CC,IAC3D,MAAM,MAAEtB,EAAF,cAASC,GAAkBqB,EAAMC,cACjCC,EAAiBzB,EAAS,CAAEC,QAAOC,kBACnCwB,EAAenB,EAAgB,CAAEN,MAAOwB,IAE9CtC,EAAcc,GACdL,EAAc8B,GACVzC,GAA4D,cAAnC0C,EAAAA,EAAAA,IAAQ1C,IAAuCA,EAAsBwC,EAAtB,EA4E5DG,QAzEwC,KACxD9B,EAAgB,mBAChBN,EAAkB,cAElBE,GAAiB,KAAD,GAAhB,EAsEgBmC,OAnEwCN,IACxD,MAAM,MAAEtB,EAAF,cAASC,GAAkBqB,EAAMC,cACjCC,EAAiBzB,EAAS,CAAEC,QAAOC,kBAEzCf,GAAc,IAAM,IACpB2C,YAAW,KACP3C,GAAc,IAAMsC,GAApB,GACD,GAEH,MAAML,EAAUK,GAAqC,IAAnBA,EAAuB,SAAW,cAC9DC,EAAenB,EAAgB,CAAEN,MAAOwB,IAE9C3B,EAAgBsB,GAChB5B,EAAkBkC,GAEdhD,GACAgB,GAAiB,IAAwB,YAAjBgC,EAA6B,QAAU,SAClE,EAmDe,gBAAehD,QAAYoC,EAC3B,wBAAoD,YAA7Ba,EAAAA,EAAAA,IAAQhD,GAAgCoD,KAAKC,UAAUrD,QAAmBmC,EACjGK,MAAOxB,UAInB,gBAAKsB,UAAWC,EAAsBC,MAAO,CAAC1B,EAAgB,UAAY,SAAUF,GAAgBwB,KAAK,KAAzG,WACOtB,IACC,iCACI,SAACzB,EAAD,CAAOiE,KAAMxC,EAAeyC,cAAUpB,EAAWqB,iBAAarB,EAAWM,QAAQ,YACjF,iBAAMH,UAAWC,EAAjB,SAAiD,YAAlBzB,EAA8B,UAAY,kBAMhG,C","sources":["webpack://rrkallan-demo/./src/@rrkallan/ui-library/FormElements/InputfieldText/resources/styles/inputfieldText.module.scss?f36c","@rrkallan/ui-library/FormElements/InputfieldText/index.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"container\":\"inputfieldText_container__wLsCc\",\"label\":\"inputfieldText_label__4Wh2w\",\"title\":\"inputfieldText_title__8ayzZ\",\"fieldset\":\"inputfieldText_fieldset__69Ji5\",\"icon\":\"inputfieldText_icon__nSLQ-\",\"inputContainer\":\"inputfieldText_inputContainer__8RSMw\",\"input\":\"inputfieldText_input__DAT7h\",\"iconValidated\":\"inputfieldText_iconValidated__gaS6l\",\"text\":\"inputfieldText_text__mKDY-\"};","import { useState, useEffect, ChangeEventHandler, FocusEventHandler } from \"react\";\nimport loadable from \"@loadable/component\";\nimport { getType, isElementValid, validations, clearEmptyCharsOnBothEnds } from \"@rrkallan/js-helpers\";\nimport { Loading } from \"@rrkallan/ui-library\";\nimport InterfaceInputfieldText from \"./types\";\nimport type { TypesElememtStateProps, TypesGetValueProps } from \"./types\";\nimport styles from \"./resources/styles/inputfieldText.module.scss\";\n\nconst Icons = loadable(() => import(/* webpackChunkName: \"MainRoutes\" */ \"@rrkallan/ui-library/Icons\"), {\n    fallback: <Loading />,\n});\n\nfunction InputfieldText({\n    id,\n    title,\n    name,\n    defaultValue = \"\",\n    type = \"text\",\n    readOnly = false,\n    disabled = false,\n    required = false,\n    validationTypes = undefined,\n    autoComplete = \"off\",\n    max = undefined,\n    min = undefined,\n    step = undefined,\n    clearValue = false,\n    customOnChangeHandler = undefined,\n}: InterfaceInputfieldText): JSX.Element {\n    const [inputValue, setInputValue] = useState(() => defaultValue);\n    const [containerVariant, setContainerVariant] = useState((): string | undefined => undefined);\n    const [containerState, setContainerState] = useState(() => (required ? \"isEmpty\" : \"isValid\"));\n    const [iconValidated, setIconValidated] = useState((): string | undefined => undefined);\n    // const [icon, setIcon] = useState((): string | undefined => undefined);\n    const [inputState, setInputState] = useState(() => (required ? \"isEmpty\" : \"isValid\"));\n    const [titleVariant, setTitleVariant] = useState(() => (defaultValue ? \"legend\" : \"placeholder\"));\n    const [inputId] = useState(() => `${name}-${id}`);\n\n    const getValue = ({ value, valueAsNumber }: TypesGetValueProps): string | number => {\n        if ([NaN, Infinity].includes(valueAsNumber)) return clearEmptyCharsOnBothEnds(value);\n\n        return valueAsNumber;\n    };\n\n    const getElementState = ({ value }: TypesElememtStateProps) => {\n        const valueIsEmpty = validations.isEmpty(value);\n        if (valueIsEmpty && !required) return \"isValid\";\n        if (valueIsEmpty && required) return \"isEmpty\";\n\n        const elememtState = isElementValid(validationTypes, value);\n\n        return elememtState;\n    };\n\n    const onChangeHandler: ChangeEventHandler<HTMLInputElement> = (event) => {\n        const { value, valueAsNumber } = event.currentTarget;\n        const valueCorrected = getValue({ value, valueAsNumber });\n        const elementState = getElementState({ value: valueCorrected });\n\n        setInputValue(value);\n        setInputState(elementState);\n        if (customOnChangeHandler && getType(customOnChangeHandler) === \"function\") customOnChangeHandler(valueCorrected);\n    };\n\n    const onFocusHandler: FocusEventHandler<HTMLInputElement> = () => {\n        setTitleVariant(\"legend focussed\");\n        setContainerState(\"isFocussed\");\n\n        setIconValidated(() => undefined);\n    };\n\n    const onBlurHandler: FocusEventHandler<HTMLInputElement> = (event) => {\n        const { value, valueAsNumber } = event.currentTarget;\n        const valueCorrected = getValue({ value, valueAsNumber });\n\n        setInputValue(() => 1);\n        setTimeout(() => {\n            setInputValue(() => valueCorrected);\n        }, 1);\n\n        const variant = valueCorrected || valueCorrected === 0 ? \"legend\" : \"placeholder\";\n        const elementState = getElementState({ value: valueCorrected });\n\n        setTitleVariant(variant);\n        setContainerState(elementState);\n\n        if (required) {\n            setIconValidated(() => (elementState === \"isValid\" ? \"check\" : \"alert\"));\n        }\n    };\n\n    useEffect(() => {\n        let ignore = false;\n        const variantValue = [disabled ? \"disabled\" : undefined, readOnly ? \"read-only\" : undefined].join(\" \").trim() || undefined;\n\n        if (!ignore) setContainerVariant(variantValue);\n\n        return () => {\n            ignore = true;\n        };\n    }, [disabled, readOnly]);\n\n    useEffect(() => {\n        let ignore = false;\n        if (clearValue && !ignore) setInputValue(defaultValue || \"\");\n\n        return () => {\n            ignore = true;\n        };\n    }, [clearValue, defaultValue]);\n\n    return (\n        <section className={styles.container} state={type === \"hidden\" ? \"hidden\" : undefined}>\n            <article className={styles.label} variant={titleVariant}>\n                <label htmlFor={inputId} className={styles.title}>\n                    {title}\n                </label>\n            </article>\n            <fieldset className={styles.fieldset} variant={containerVariant} state={containerState}>\n                <legend className={styles.title} variant={titleVariant}>\n                    {title}\n                </legend>\n                <div className={styles.inputContainer}>\n                    <input\n                        id={inputId}\n                        className={styles.input}\n                        name={name}\n                        type={type}\n                        value={inputValue}\n                        required={required}\n                        disabled={disabled}\n                        readOnly={readOnly}\n                        autoComplete={autoComplete}\n                        min={type === \"number\" ? min : undefined}\n                        max={type === \"number\" ? max : undefined}\n                        step={type === \"number\" ? step || 1 : undefined}\n                        onChange={onChangeHandler}\n                        onFocus={onFocusHandler}\n                        onBlur={onBlurHandler}\n                        data-required={required || undefined}\n                        data-validation-types={getType(validationTypes) === \"object\" ? JSON.stringify(validationTypes) : undefined}\n                        state={inputState}\n                    />\n                </div>\n            </fieldset>\n            <div className={styles.iconValidated} state={[iconValidated ? \"visible\" : \"hidden\", containerState].join(\" \")}>\n                {!!iconValidated && (\n                    <>\n                        <Icons icon={iconValidated} svgProps={undefined} noContainer={undefined} variant=\"normal\" />\n                        <span className={styles.text}>{iconValidated === \"isValid\" ? \"correct\" : \"errror\"}</span>\n                    </>\n                )}\n            </div>\n        </section>\n    );\n}\n\nexport default InputfieldText;\n"],"names":["Icons","loadable","fallback","id","title","name","defaultValue","type","readOnly","disabled","required","validationTypes","autoComplete","max","min","step","clearValue","customOnChangeHandler","inputValue","setInputValue","useState","containerVariant","setContainerVariant","containerState","setContainerState","iconValidated","setIconValidated","inputState","setInputState","titleVariant","setTitleVariant","inputId","getValue","value","valueAsNumber","NaN","Infinity","includes","clearEmptyCharsOnBothEnds","getElementState","valueIsEmpty","validations","isElementValid","useEffect","ignore","variantValue","undefined","join","trim","className","styles","state","variant","htmlFor","onChange","event","currentTarget","valueCorrected","elementState","getType","onFocus","onBlur","setTimeout","JSON","stringify","icon","svgProps","noContainer"],"sourceRoot":""}