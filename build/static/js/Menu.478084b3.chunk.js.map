{"version":3,"file":"static/js/Menu.478084b3.chunk.js","mappings":"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","sources":["webpack://rrkallan-demo/./src/components/Menu/resources/styles/menu.module.scss?9e84","components/Menu/index.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"container\":\"menu_container__uyfzo\",\"mobileButtonContainer\":\"menu_mobileButtonContainer__YHGI8\",\"mobileButtonUnit\":\"menu_mobileButtonUnit__3vGS7\",\"iconContainer\":\"menu_iconContainer__GM5Dx\",\"iconUnit\":\"menu_iconUnit__V2KKI\",\"unit\":\"menu_unit__7CpF8\",\"item\":\"menu_item__9jqoN\",\"link\":\"menu_link__B25Aq\",\"text\":\"menu_text__XmNFI\"};","import { useState, useEffect, useCallback, MouseEvent, KeyboardEvent, useRef, useLayoutEffect } from \"react\";\nimport { keyEvent, getParentElementWithAttributeValue } from \"@rrkallan/js-helpers\";\nimport { NavigationLink } from \"@rrkallan/ui-library\";\nimport InterfaceOnOutSideClick from \"./types\";\nimport menu from \"./resources/data/menu.json\";\nimport styles from \"./resources/styles/menu.module.scss\";\n\nfunction Menu(): JSX.Element | null {\n    const menuContainerRef = useRef<HTMLUListElement>(null);\n    const [menuStateActive, setMenuStateActive] = useState(() => false);\n    const [menuItems, setMenuItems] = useState((): HTMLAnchorElement[] => []);\n\n    const onKeyDownHandlerMobileButton = (event: KeyboardEvent<HTMLButtonElement>) => {\n        if (event?.type === \"keydown\" && ![keyEvent.enter, keyEvent.spacebar].includes(event?.key)) return;\n\n        event.preventDefault();\n\n        setMenuStateActive(() => !menuStateActive);\n    };\n\n    const onClickHandlerMobileButton = () => setMenuStateActive(() => !menuStateActive);\n\n    const onClickHandlerNavLink = (event: MouseEvent<HTMLAnchorElement>) => {\n        const { currentTarget } = event || {};\n        currentTarget.blur();\n\n        if (menuStateActive) onClickHandlerMobileButton();\n    };\n\n    const onOutSideClick: EventListener = useCallback(\n        (event: InterfaceOnOutSideClick) => {\n            if (event?.type === \"keydown\" && [keyEvent.arrowLeft, keyEvent.arrowRight].includes(event?.key)) {\n                const lastKey = menuItems.length - 1;\n\n                menuItems.forEach((element: HTMLAnchorElement, key: number) => {\n                    if (element.isEqualNode(event.target as Node)) {\n                        let newKeyItemFocus = key;\n                        if (event.key === keyEvent.arrowLeft) newKeyItemFocus = key - 1;\n                        if (event.key === keyEvent.arrowRight) newKeyItemFocus = key + 1;\n\n                        if (newKeyItemFocus > lastKey) newKeyItemFocus = 0;\n                        if (newKeyItemFocus === -1) newKeyItemFocus = lastKey;\n\n                        menuItems[newKeyItemFocus].focus();\n                    }\n                });\n\n                return;\n            }\n\n            if (event?.type === \"keydown\" && event?.key !== keyEvent.esc) return;\n\n            const element = event?.target || undefined;\n            const hasParentElementMobileButton = !!getParentElementWithAttributeValue(element, \"variant\", \"mobile-button\");\n\n            if (!hasParentElementMobileButton) setMenuStateActive(!menuStateActive);\n        },\n        [menuItems, menuStateActive]\n    );\n\n    useLayoutEffect(() => {\n        const allItems = menuContainerRef.current?.querySelectorAll(\"a\") || [];\n        const notActiveItems: HTMLAnchorElement[] = [];\n        allItems.forEach((element: HTMLAnchorElement) => {\n            if (!element.hasAttribute(\"variant\")) {\n                notActiveItems.push(element);\n            }\n        });\n        setMenuItems(notActiveItems);\n    }, []);\n\n    useEffect(() => {\n        const listenerKey = menuStateActive ? \"addEventListener\" : \"removeEventListener\";\n\n        window.document[listenerKey](\"click\", onOutSideClick);\n        window.document[listenerKey](\"keydown\", onOutSideClick);\n\n        return () => {\n            window.document.removeEventListener(\"click\", onOutSideClick);\n            window.document.removeEventListener(\"keydown\", onOutSideClick);\n        };\n    }, [menuStateActive, onOutSideClick]);\n\n    if (!menu?.length) return null;\n\n    return (\n        <nav className={styles.container}>\n            <div className={styles.mobileButtonContainer}>\n                <button\n                    className={styles.mobileButtonUnit}\n                    type=\"button\"\n                    onClick={onClickHandlerMobileButton}\n                    onKeyDown={onKeyDownHandlerMobileButton}\n                    variant=\"mobile-button\"\n                >\n                    <div className={styles.iconContainer} state={`${menuStateActive ? \"is\" : \"in\"}-active`}>\n                        <span className={styles.iconUnit} />\n                        <span className={styles.iconUnit} />\n                        <span className={styles.iconUnit} />\n                        <span className={styles.iconUnit} />\n                    </div>\n                </button>\n            </div>\n            <ul ref={menuContainerRef} className={styles.unit} state={`${menuStateActive ? \"is\" : \"in\"}-active`}>\n                {menu?.map(({ id, title, url, exact }) => (\n                    <li key={id} className={styles.item}>\n                        <NavigationLink className={styles.link} onClick={onClickHandlerNavLink} end={exact} to={url} setTabIndex>\n                            <span className={styles.text}>{title}</span>\n                        </NavigationLink>\n                    </li>\n                ))}\n            </ul>\n        </nav>\n    );\n}\n\nexport default Menu;\n"],"names":["menuContainerRef","useRef","menuStateActive","setMenuStateActive","useState","menuItems","setMenuItems","onClickHandlerMobileButton","onClickHandlerNavLink","event","currentTarget","blur","onOutSideClick","useCallback","type","keyEvent","includes","key","lastKey","length","forEach","element","isEqualNode","target","newKeyItemFocus","focus","undefined","getParentElementWithAttributeValue","useLayoutEffect","allItems","current","querySelectorAll","notActiveItems","hasAttribute","push","useEffect","listenerKey","window","document","removeEventListener","menu","className","styles","onClick","onKeyDown","preventDefault","variant","state","ref","id","title","url","exact","end","to","setTabIndex"],"sourceRoot":""}